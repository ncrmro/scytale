- set_fact:
    service_cert_dir: "certs/{{ item.host }}/{{ item.name }}"

- name: Create Service  certificate directory
  file:
    path: "{{ service_cert_dir }}"
    state: directory
  register: certs_dir

- set_fact:
    service_private_key_path: "{{ service_cert_dir }}/{{ item.name }}.key"
    service_csr_path: "{{ service_cert_dir }}/{{ item.name }}.csr"
    service_cert_path: "{{ service_cert_dir }}/{{ item.name }}.crt"
    service_var_base: "{{item.host}}_{{item.name}}"

- set_fact:
    service_var_private_key: "{{service_var_base}}_key"
    service_var_cert: "{{service_var_base}}_cert"

####
# Private key
- name: Make sure we have a private key and it's checked into the Ansible Vault.
  include: "private_key.yml"
  when: lookup('vars', service_var_private_key, default='') == ''

- name: Check private key is available in local file system, if not we can pull from vault
  stat:
    path: "{{ service_private_key_path }}"
  register: stat_result

- name: Export private key from ansible vault to local file system
  copy:
    dest: "{{ service_private_key_path }}"
    content: "{{ lookup('vars', service_var_private_key) }}"
  when: not stat_result.stat.exists
# END Private key
####

####
# Certificate
- name: Export Certificate from ansible vault to local file system
  copy:
    dest: "{{ service_cert_path }}"
    content: "{{ lookup('vars', service_var_cert) }}"
  when: not lookup('vars', service_var_cert, default='') == ''

- name: Check if certificate is available
  stat:
    path: "{{ service_cert_path }}"
  register: cert_stat_result

- openssl_certificate_info:
    path: "{{ service_cert_path }}"
    # for valid_at, invalid_at and valid_in
    valid_at:
      thirty_days: "+30d"
      one_year: "+365d"
      ten_years: "+3650d"
  register: result
  when: cert_stat_result.stat.exists

- set_fact:
    cert_not_available: "{{ 'skipped' in result and result.skipped }}"
    cert_expiring_soon: "{{ 'valid_at' in result and not result.valid_at.thirty_days  }}"

- name: Generate a new certificate when cert not available or expiring soon.
  include: "certificate.yml"
  when: cert_not_available or cert_expiring_soon
# End Certificate
####
